# # Задание 1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого элемента.
# # Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.
#
# # Создаем список с элементами разных типов данных
# elements = [10, 3.14, True, "Строка", [1, 2, 3], (4, 5, 6), {7, 8, 9}, {"ключ": "значение"}, None]
# 5
# # Проверяем тип данных каждого элемента списка
# for element in elements:
#     print(f"Элемент: {element}, Тип: {type(element)}")

# Задание 2. Для списка реализовать обмен значений соседних элементов, т.е. значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д.
# При нечетном количестве элементов последний сохранить на своем месте. Для заполнения списка элементов необходимо использовать функцию input().

# # Получение числа элементов списка от пользователя
# n = int(input("Введите количество элементов списка: "))
#
# # Создание списка с элементами, введенными пользователем
# elements = []
# for i in range(n):
#     elements.append(input(f"Введите элемент {i + 1}: "))
#
# # Проходим по списку с шагом 2, чтобы обменять элементы местами
# for i in range(0, len(elements) - 1, 2):
#     elements[i], elements[i + 1] = elements[i + 1], elements[i]
#
# # Выводим измененный список
# print("Измененный список:", elements)

# Задание 3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени года относится месяц (зима, весна, лето, осень).
# Напишите решения через list и через dict.
# Через list:

# Ввод номера месяца пользователем
# month = int(input("Введите номер месяца (1-12): "))
#
# # Список времен года
# seasons = ['зима', 'весна', 'лето', 'осень']
#
# # Определение времени года
# if month in [1, 2, 12]:
#     season = seasons[0]
# elif month in [3, 4, 5]:
#     season = seasons[1]
# elif month in [6, 7, 8]:
#     season = seasons[2]
# elif month in [9, 10, 11]:
#     season = seasons[3]
# else:
#     season = "неизвестно"
#
# # Вывод результата
# print(f"Выбранный месяц относится к времени года: {season}")

# Через list:

# Ввод номера месяца пользователем
# month = int(input("Введите номер месяца (1-12): "))
#
# # Словарь времен года
# seasons_dict = {
#     1: 'зима', 2: 'зима', 12: 'зима',
#     3: 'весна', 4: 'весна', 5: 'весна',
#     6: 'лето', 7: 'лето', 8: 'лето',
#     9: 'осень', 10: 'осень', 11: 'осень'
# }
#
# # Определение времени года
# season = seasons_dict.get(month, "неизвестно")
#
# # Вывод результата
# print(f"Выбранный месяц относится к времени года: {season}")

# Задание 4. Пользователь вводит строку из нескольких слов, разделённых пробелами.
# Вывести каждое слово с новой строки. Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.

# Ввод строки пользователем
# user_input = input("Введите строку из нескольких слов, разделенных пробелами: ")
#
# # Разделение строки на слова
# words = user_input.split()
#
# # Вывод каждого слова с новой строки, пронумерованный и обрезанный до 10 букв
# for i, word in enumerate(words, start=1):
#     print(f"{i}. {word[:10]}")
#
# Задание 5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
# У пользователя необходимо запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями,
# то новый элемент с тем же значением должен разместиться после них.

# Начальный рейтинг
# my_list = [7, 5, 3, 3, 2]
#
# # Функция для добавления нового элемента в рейтинг
# def add_to_rating(rating_list, new_element):
#     # Находим позицию для нового элемента
#     position_found = False
#     for i in range(len(rating_list)):
#         if rating_list[i] < new_element:
#             rating_list.insert(i, new_element)
#             position_found = True
#             break
#     # Если элемент меньше всех в списке, добавляем его в конец
#     if not position_found:
#         rating_list.append(new_element)
#     return rating_list
#
# # Предположим, что пользователь вводит новые элементы
# new_elements = input("Введите новый элемент: ")
#
# for new_element in new_elements:
#     # Добавляем новый элемент в рейтинг
#     my_list = add_to_rating(my_list, new_element)
#     print(f"Обновленный рейтинг: {my_list}")

# Задание 6. Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. Каждый кортеж хранит информацию об отдельном товаре.
# В кортеже должно быть два элемента — номер товара и словарь с параметрами (характеристиками товара: название, цена, количество, единица измерения).
# Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.

# Инициализация списка товаров
# products = []
#
# Количество товаров для ввода
# product_count = int(input("Введите количество товаров: "))
#
# for i in range(product_count):
#     print(f"Товар {i + 1}:")
#     name = input("Введите название товара: ")
#     price = int(input("Введите цену товара: "))
#     quantity = int(input("Введите количество товара: "))
#     unit = input("Введите единицу измерения: ")
#
#     Создание кортежа для товара
#     product = (i + 1, {"название": name, "цена": price, "количество": quantity, "ед": unit})
#
#     Добавление товара в список
#     products.append(product)
#
# print("Структура данных 'Товары':")
# print(products)

# Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара,
# например название, а значение — список значений-характеристик, например список названий товаров.

# Инициализация словаря для аналитики
# analytics = {"название": [], "цена": [], "количество": [], "ед": set()}
#
# for product in products:
#     # Распаковка данных о товаре
#     info = product
#
#     # Добавление информации в словарь аналитики
#     analytics["название"].append(info["название"])
#     analytics["цена"].append(info["цена"])
#     analytics["количество"].append(info["количество"])
#     analytics["ед"].add(info["ед"])  # Используем set для уникальности значений
#
# # Преобразование множества в список
# analytics["ед"] = list(analytics["ед"])
#
# print("Аналитика по товарам:")
# print(analytics)